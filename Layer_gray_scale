import numpy as np
from keras.layers import Layer
from keras import backend as K

class Grayscale(Layer):
    def __init__(self, **kwargs):
        super(Grayscale, self).__init__(**kwargs)

    def build(self, input_shape):
       #Creando una variable de peso entrenable para esta capa.
        self.kernel = self.add_weight(name='kernel',
                                      shape=(3, 1),
                                      initializer='identity',
                                      trainable=True)
        super(Grayscale, self).build(input_shape)  

    def call(self, x, mask=None):
        if K.image_data_format() == 'channels_first':
            channel_dim = 1
        else:
            channel_dim = -1
# Usando el modo 'válido' ya que solo nos preocupa el centro
# 'same' repetiría los valores del kernel para llenar el tensor de entrada
        return K.conv2d(x, self.kernel, strides=(1, 1), padding='valid', data_format=K.image_data_format())

    def compute_output_shape(self, input_shape):
        if K.image_data_format() == 'channels_first':
            return (input_shape[0], input_shape[1], input_shape[2], 1)
        else:
            return (input_shape[0], input_shape[1], input_shape[2], 1)
